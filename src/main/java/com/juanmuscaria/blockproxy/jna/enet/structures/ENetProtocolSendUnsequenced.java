package com.juanmuscaria.blockproxy.jna.enet.structures;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : ./enet/protocol.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ENetProtocolSendUnsequenced extends Structure {
	/** C type : ENetProtocolCommandHeader */
	public ENetProtocolCommandHeader header;
	/** C type : enet_uint16 */
	public short unsequencedGroup;
	/** C type : enet_uint16 */
	public short dataLength;
	public ENetProtocolSendUnsequenced() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("header", "unsequencedGroup", "dataLength");
	}
	/**
	 * @param header C type : ENetProtocolCommandHeader<br>
	 * @param unsequencedGroup C type : enet_uint16<br>
	 * @param dataLength C type : enet_uint16
	 */
	public ENetProtocolSendUnsequenced(ENetProtocolCommandHeader header, short unsequencedGroup, short dataLength) {
		super();
		this.header = header;
		this.unsequencedGroup = unsequencedGroup;
		this.dataLength = dataLength;
	}
	public ENetProtocolSendUnsequenced(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ENetProtocolSendUnsequenced implements Structure.ByReference {
		
	}

	public static class ByValue extends ENetProtocolSendUnsequenced implements Structure.ByValue {
		
	}
}
