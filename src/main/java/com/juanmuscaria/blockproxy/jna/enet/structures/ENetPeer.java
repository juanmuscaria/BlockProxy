package com.juanmuscaria.blockproxy.jna.enet.structures;
import com.juanmuscaria.blockproxy.jna.enet.Enet;
import com.juanmuscaria.blockproxy.jna.types.Size_t;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : enet/enet.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ENetPeer extends Structure {
	/** C type : ENetListNode */
	public ENetListNode dispatchList;
	/** C type : _ENetHost* */
	public ENetHost.ByReference host;
	/** C type : enet_uint16 */
	public short outgoingPeerID;
	/** C type : enet_uint16 */
	public short incomingPeerID;
	/** C type : enet_uint32 */
	public int connectID;
	/** C type : enet_uint8 */
	public byte outgoingSessionID;
	/** C type : enet_uint8 */
	public byte incomingSessionID;
	/**
	 * < Internet address of the peer<br>
	 * C type : ENetAddress
	 */
	public ENetAddress address;
	/**
	 * < Application private data, may be freely modified<br>
	 * C type : void*
	 */
	public Pointer data;
	/**
	 * C type : ENetPeerState
	 */
	public int state;
	/** C type : ENetChannel* */
	public ENetChannel.ByReference channels;
	/** < Number of channels allocated for communication with peer */
	public Size_t channelCount;
	/**
	 * < Downstream bandwidth of the client in bytes/second<br>
	 * C type : enet_uint32
	 */
	public int incomingBandwidth;
	/**
	 * < Upstream bandwidth of the client in bytes/second<br>
	 * C type : enet_uint32
	 */
	public int outgoingBandwidth;
	/** C type : enet_uint32 */
	public int incomingBandwidthThrottleEpoch;
	/** C type : enet_uint32 */
	public int outgoingBandwidthThrottleEpoch;
	/** C type : enet_uint32 */
	public int incomingDataTotal;
	/** C type : enet_uint32 */
	public int outgoingDataTotal;
	/** C type : enet_uint32 */
	public int lastSendTime;
	/** C type : enet_uint32 */
	public int lastReceiveTime;
	/** C type : enet_uint32 */
	public int nextTimeout;
	/** C type : enet_uint32 */
	public int earliestTimeout;
	/** C type : enet_uint32 */
	public int packetLossEpoch;
	/** C type : enet_uint32 */
	public int packetsSent;
	/** C type : enet_uint32 */
	public int packetsLost;
	/**
	 * < mean packet loss of reliable packets as a ratio with respect to the constant ENET_PEER_PACKET_LOSS_SCALE<br>
	 * C type : enet_uint32
	 */
	public int packetLoss;
	/** C type : enet_uint32 */
	public int packetLossVariance;
	/** C type : enet_uint32 */
	public int packetThrottle;
	/** C type : enet_uint32 */
	public int packetThrottleLimit;
	/** C type : enet_uint32 */
	public int packetThrottleCounter;
	/** C type : enet_uint32 */
	public int packetThrottleEpoch;
	/** C type : enet_uint32 */
	public int packetThrottleAcceleration;
	/** C type : enet_uint32 */
	public int packetThrottleDeceleration;
	/** C type : enet_uint32 */
	public int packetThrottleInterval;
	/** C type : enet_uint32 */
	public int pingInterval;
	/** C type : enet_uint32 */
	public int timeoutLimit;
	/** C type : enet_uint32 */
	public int timeoutMinimum;
	/** C type : enet_uint32 */
	public int timeoutMaximum;
	/** C type : enet_uint32 */
	public int lastRoundTripTime;
	/** C type : enet_uint32 */
	public int lowestRoundTripTime;
	/** C type : enet_uint32 */
	public int lastRoundTripTimeVariance;
	/** C type : enet_uint32 */
	public int highestRoundTripTimeVariance;
	/**
	 * < mean round trip time (RTT), in milliseconds, between sending a reliable packet and receiving its acknowledgement<br>
	 * C type : enet_uint32
	 */
	public int roundTripTime;
	/** C type : enet_uint32 */
	public int roundTripTimeVariance;
	/** C type : enet_uint32 */
	public int mtu;
	/** C type : enet_uint32 */
	public int windowSize;
	/** C type : enet_uint32 */
	public int reliableDataInTransit;
	/** C type : enet_uint16 */
	public short outgoingReliableSequenceNumber;
	/** C type : ENetList */
	public ENetList acknowledgements;
	/** C type : ENetList */
	public ENetList sentReliableCommands;
	/** C type : ENetList */
	public ENetList sentUnreliableCommands;
	/** C type : ENetList */
	public ENetList outgoingReliableCommands;
	/** C type : ENetList */
	public ENetList outgoingUnreliableCommands;
	/** C type : ENetList */
	public ENetList dispatchedCommands;
	public int needsDispatch;
	/** C type : enet_uint16 */
	public short incomingUnsequencedGroup;
	/** C type : enet_uint16 */
	public short outgoingUnsequencedGroup;
	/** C type : enet_uint32[ENET_PEER_UNSEQUENCED_WINDOW_SIZE / 32] */
	public int[] unsequencedWindow = new int[Enet.ENET_PEER_UNSEQUENCED_WINDOW_SIZE / 32];
	/** C type : enet_uint32 */
	public int eventData;
	public Size_t totalWaitingData;
	public ENetPeer() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("dispatchList", "host", "outgoingPeerID", "incomingPeerID", "connectID", "outgoingSessionID", "incomingSessionID", "address", "data", "state", "channels", "channelCount", "incomingBandwidth", "outgoingBandwidth", "incomingBandwidthThrottleEpoch", "outgoingBandwidthThrottleEpoch", "incomingDataTotal", "outgoingDataTotal", "lastSendTime", "lastReceiveTime", "nextTimeout", "earliestTimeout", "packetLossEpoch", "packetsSent", "packetsLost", "packetLoss", "packetLossVariance", "packetThrottle", "packetThrottleLimit", "packetThrottleCounter", "packetThrottleEpoch", "packetThrottleAcceleration", "packetThrottleDeceleration", "packetThrottleInterval", "pingInterval", "timeoutLimit", "timeoutMinimum", "timeoutMaximum", "lastRoundTripTime", "lowestRoundTripTime", "lastRoundTripTimeVariance", "highestRoundTripTimeVariance", "roundTripTime", "roundTripTimeVariance", "mtu", "windowSize", "reliableDataInTransit", "outgoingReliableSequenceNumber", "acknowledgements", "sentReliableCommands", "sentUnreliableCommands", "outgoingReliableCommands", "outgoingUnreliableCommands", "dispatchedCommands", "needsDispatch", "incomingUnsequencedGroup", "outgoingUnsequencedGroup", "unsequencedWindow", "eventData", "totalWaitingData");
	}
	public ENetPeer(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ENetPeer implements Structure.ByReference {
		
	}

	public static class ByValue extends ENetPeer implements Structure.ByValue {
		
	}
}
