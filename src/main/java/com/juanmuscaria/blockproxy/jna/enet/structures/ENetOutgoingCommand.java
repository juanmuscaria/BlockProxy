package com.juanmuscaria.blockproxy.jna.enet.structures;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : enet/enet.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ENetOutgoingCommand extends Structure {
	/** C type : ENetListNode */
	public ENetListNode outgoingCommandList;
	/** C type : enet_uint16 */
	public short reliableSequenceNumber;
	/** C type : enet_uint16 */
	public short unreliableSequenceNumber;
	/** C type : enet_uint32 */
	public int sentTime;
	/** C type : enet_uint32 */
	public int roundTripTimeout;
	/** C type : enet_uint32 */
	public int roundTripTimeoutLimit;
	/** C type : enet_uint32 */
	public int fragmentOffset;
	/** C type : enet_uint16 */
	public short fragmentLength;
	/** C type : enet_uint16 */
	public short sendAttempts;
	/** C type : ENetProtocol */
	public ENetProtocol command;
	/** C type : ENetPacket* */
	public ENetPacket.ByReference packet;
	public ENetOutgoingCommand() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("outgoingCommandList", "reliableSequenceNumber", "unreliableSequenceNumber", "sentTime", "roundTripTimeout", "roundTripTimeoutLimit", "fragmentOffset", "fragmentLength", "sendAttempts", "command", "packet");
	}
	public ENetOutgoingCommand(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ENetOutgoingCommand implements Structure.ByReference {
		
	}

	public static class ByValue extends ENetOutgoingCommand implements Structure.ByValue {
		
	}
}
