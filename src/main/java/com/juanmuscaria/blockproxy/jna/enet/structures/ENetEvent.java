package com.juanmuscaria.blockproxy.jna.enet.structures;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : enet/enet.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ENetEvent extends Structure {
	/**
	 * @see ENetEventType<br>
	 * < type of the event<br>
	 * C type : ENetEventType
	 */
	public int type;
	/**
	 * < peer that generated a connect, disconnect or receive event<br>
	 * C type : ENetPeer*
	 */
	public ENetPeer.ByReference peer;
	/**
	 * < channel on the peer that generated the event, if appropriate<br>
	 * C type : enet_uint8
	 */
	public byte channelID;
	/**
	 * < data associated with the event, if appropriate<br>
	 * C type : enet_uint32
	 */
	public int data;
	/**
	 * < packet associated with the event, if appropriate<br>
	 * C type : ENetPacket*
	 */
	public ENetPacket.ByReference packet;
	public ENetEvent() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("type", "peer", "channelID", "data", "packet");
	}
	/**
	 * @param type @see ENetEventType<br>
	 * < type of the event<br>
	 * C type : ENetEventType<br>
	 * @param peer < peer that generated a connect, disconnect or receive event<br>
	 * C type : ENetPeer*<br>
	 * @param channelID < channel on the peer that generated the event, if appropriate<br>
	 * C type : enet_uint8<br>
	 * @param data < data associated with the event, if appropriate<br>
	 * C type : enet_uint32<br>
	 * @param packet < packet associated with the event, if appropriate<br>
	 * C type : ENetPacket*
	 */
	public ENetEvent(int type, ENetPeer.ByReference peer, byte channelID, int data, ENetPacket.ByReference packet) {
		super();
		this.type = type;
		this.peer = peer;
		this.channelID = channelID;
		this.data = data;
		this.packet = packet;
	}
	public ENetEvent(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ENetEvent implements Structure.ByReference {
		
	}

	public static class ByValue extends ENetEvent implements Structure.ByValue {
		
	}
}
