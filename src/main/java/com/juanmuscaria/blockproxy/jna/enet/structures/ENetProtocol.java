package com.juanmuscaria.blockproxy.jna.enet.structures;
import com.sun.jna.Pointer;
import com.sun.jna.Union;
/**
 * <i>native declaration : ./enet/protocol.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ENetProtocol extends Union {
	/** C type : ENetProtocolCommandHeader */
	public ENetProtocolCommandHeader header;
	/** C type : ENetProtocolAcknowledge */
	public ENetProtocolAcknowledge acknowledge;
	/** C type : ENetProtocolConnect */
	public ENetProtocolConnect connect;
	/** C type : ENetProtocolVerifyConnect */
	public ENetProtocolVerifyConnect verifyConnect;
	/** C type : ENetProtocolDisconnect */
	public ENetProtocolDisconnect disconnect;
	/** C type : ENetProtocolPing */
	public ENetProtocolPing ping;
	/** C type : ENetProtocolSendReliable */
	public ENetProtocolSendReliable sendReliable;
	/** C type : ENetProtocolSendUnreliable */
	public ENetProtocolSendUnreliable sendUnreliable;
	/** C type : ENetProtocolSendUnsequenced */
	public ENetProtocolSendUnsequenced sendUnsequenced;
	/** C type : ENetProtocolSendFragment */
	public ENetProtocolSendFragment sendFragment;
	/** C type : ENetProtocolBandwidthLimit */
	public ENetProtocolBandwidthLimit bandwidthLimit;
	/** C type : ENetProtocolThrottleConfigure */
	public ENetProtocolThrottleConfigure throttleConfigure;
	public ENetProtocol() {
		super();
	}
	/** @param header C type : ENetProtocolCommandHeader */
	public ENetProtocol(ENetProtocolCommandHeader header) {
		super();
		this.header = header;
		setType(ENetProtocolCommandHeader.class);
	}
	/** @param acknowledge C type : ENetProtocolAcknowledge */
	public ENetProtocol(ENetProtocolAcknowledge acknowledge) {
		super();
		this.acknowledge = acknowledge;
		setType(ENetProtocolAcknowledge.class);
	}
	/** @param connect C type : ENetProtocolConnect */
	public ENetProtocol(ENetProtocolConnect connect) {
		super();
		this.connect = connect;
		setType(ENetProtocolConnect.class);
	}
	/** @param verifyConnect C type : ENetProtocolVerifyConnect */
	public ENetProtocol(ENetProtocolVerifyConnect verifyConnect) {
		super();
		this.verifyConnect = verifyConnect;
		setType(ENetProtocolVerifyConnect.class);
	}
	/** @param disconnect C type : ENetProtocolDisconnect */
	public ENetProtocol(ENetProtocolDisconnect disconnect) {
		super();
		this.disconnect = disconnect;
		setType(ENetProtocolDisconnect.class);
	}
	/** @param ping C type : ENetProtocolPing */
	public ENetProtocol(ENetProtocolPing ping) {
		super();
		this.ping = ping;
		setType(ENetProtocolPing.class);
	}
	/** @param sendReliable C type : ENetProtocolSendReliable */
	public ENetProtocol(ENetProtocolSendReliable sendReliable) {
		super();
		this.sendReliable = sendReliable;
		setType(ENetProtocolSendReliable.class);
	}
	/** @param sendUnreliable C type : ENetProtocolSendUnreliable */
	public ENetProtocol(ENetProtocolSendUnreliable sendUnreliable) {
		super();
		this.sendUnreliable = sendUnreliable;
		setType(ENetProtocolSendUnreliable.class);
	}
	/** @param sendUnsequenced C type : ENetProtocolSendUnsequenced */
	public ENetProtocol(ENetProtocolSendUnsequenced sendUnsequenced) {
		super();
		this.sendUnsequenced = sendUnsequenced;
		setType(ENetProtocolSendUnsequenced.class);
	}
	/** @param sendFragment C type : ENetProtocolSendFragment */
	public ENetProtocol(ENetProtocolSendFragment sendFragment) {
		super();
		this.sendFragment = sendFragment;
		setType(ENetProtocolSendFragment.class);
	}
	/** @param bandwidthLimit C type : ENetProtocolBandwidthLimit */
	public ENetProtocol(ENetProtocolBandwidthLimit bandwidthLimit) {
		super();
		this.bandwidthLimit = bandwidthLimit;
		setType(ENetProtocolBandwidthLimit.class);
	}
	/** @param throttleConfigure C type : ENetProtocolThrottleConfigure */
	public ENetProtocol(ENetProtocolThrottleConfigure throttleConfigure) {
		super();
		this.throttleConfigure = throttleConfigure;
		setType(ENetProtocolThrottleConfigure.class);
	}
	public ENetProtocol(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ENetProtocol implements com.sun.jna.Structure.ByReference {
		
	}

	public static class ByValue extends ENetProtocol implements com.sun.jna.Structure.ByValue {
		
	}
}
