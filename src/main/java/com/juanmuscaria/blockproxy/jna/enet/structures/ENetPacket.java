package com.juanmuscaria.blockproxy.jna.enet.structures;
import com.juanmuscaria.blockproxy.jna.enet.Enet;
import com.juanmuscaria.blockproxy.jna.types.Size_t;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : enet/enet.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ENetPacket extends Structure {
	/** < internal use only */
	public Size_t referenceCount;
	/**
	 * < bitwise-or of ENetPacketFlag constants<br>
	 * C type : enet_uint32
	 */
	public int flags;
	/**
	 * < allocated data for packet<br>
	 * C type : enet_uint8*
	 */
	public Pointer data;
	/** < length of data */
	public Size_t dataLength;
	/**
	 * < function to be called when the packet is no longer in use<br>
	 * C type : ENetPacketFreeCallback
	 */
	public Enet.ENetPacketFreeCallback freeCallback;
	/**
	 * < application private data, may be freely modified<br>
	 * C type : void*
	 */
	public Pointer userData;
	public ENetPacket() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("referenceCount", "flags", "data", "dataLength", "freeCallback", "userData");
	}
	/**
	 * @param referenceCount < internal use only<br>
	 * @param flags < bitwise-or of ENetPacketFlag constants<br>
	 * C type : enet_uint32<br>
	 * @param data < allocated data for packet<br>
	 * C type : enet_uint8*<br>
	 * @param dataLength < length of data<br>
	 * @param freeCallback < function to be called when the packet is no longer in use<br>
	 * C type : ENetPacketFreeCallback<br>
	 * @param userData < application private data, may be freely modified<br>
	 * C type : void*
	 */
	public ENetPacket(Size_t referenceCount, int flags, Pointer data, Size_t dataLength, Enet.ENetPacketFreeCallback freeCallback, Pointer userData) {
		super();
		this.referenceCount = referenceCount;
		this.flags = flags;
		this.data = data;
		this.dataLength = dataLength;
		this.freeCallback = freeCallback;
		this.userData = userData;
	}
	public ENetPacket(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ENetPacket implements Structure.ByReference {
		
	}

	public static class ByValue extends ENetPacket implements Structure.ByValue {
		
	}
}
